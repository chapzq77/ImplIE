// Relation Patterns
// Relation patterns to match for extraction are specified in relation-patterns
// and is an array of rules.
//
// Rules
// Rules are a three element array [relation, dependency, govenor].
// The relation is a typed dependency as specified in the Stanford Dependency Parser Manual.
// The dependency and govenor must either be a part of speech label followed by
// an intger or the string "term".  A part of speech label with integer will
// together act as an identifier of a set of words for further expansion.
// NOT ACTUALLY IMPLEMENTED YET The part of speech label
// contrains that element to that part of speech.  Using the string "term" matches
// to a term in one of the relations.
//
// see http://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html
// for a complete list of part of speech labels.

// This is a bit redundant, but I'm not sure how else to define it.
// Typesafe config may have a way of doing this without putting everything in objects.

// The relation patterns CANNOT be cyclic.
tag-id = "term"
parser-model-file = "models/englishPCFG.ser.gz"
relation-patterns = [
  {
    expansion-id = ${tag-id}
    rules = [
      { rule = ["amod", "NN1", "term"] }
      { rule = ["appos_no_and", "NN1", "term"] }
      { rule = ["appos_no_and", "term", "NN1"] }
      { rule = ["conj_and_appos", "NN1", "term"] }
      { rule = ["conj_and_appos", "term", "NN1"] }
      { rule = ["nn", "NN1", "term"] }
      { rule = ["poss", "NN1", "term"] }
      { rule = ["prep_of_no_punct", "term", "NN1"] }
      { rule = ["prep_of_no_punct", "NN1", "term"] }
      { rule = ["rcmod", "NN5", "term"] }
    ]
  }
  {
    expansion-id = "NN1"
    rules = [
      { rule = ["appos_no_and", "NN1", "NN2"] }
      { rule = ["appos_no_and", "NN2", "NN1"] }
      { rule = ["conj_and_appos", "NN1", "NN2"] }
      { rule = ["conj_and_appos", "NN2", "NN1"] }
      { rule = ["nn", "FIN", "NN1"] }
      { rule = ["nn", "NN1", "FIN"] }
      { rule = ["poss", "NN2", "NN1"] }
      { rule = ["prep_of_no_punct", "NN1", "FIN"] }
    ]
  }
  {
    expansion-id = "NN2"
    rules = [
      { rule = ["appos_no_and", "NN3", "NN2"] }
      { rule = ["appos_no_and", "NN2", "NN3"] }
      { rule = ["conj_and_appos", "NN2", "NN3"] }
      { rule = ["conj_and_appos", "NN3", "NN2"] }
      { rule = ["nn", "FIN", "NN2"] }
      { rule = ["nn", "NN2", "FIN"] }
      { rule = ["prep_of_no_punct", "NN2", "FIN"] }
    ]
  }
  {
    expansion-id = "NN3"
    rules = [
      { rule = ["prep_of_no_punct", "NN3", "FIN"] }
    ]
  }
  {
    // After rcmod
    expansion-id = "NN5"
    rules = [
      { rule = ["nn", "FIN", "NN5"] }
      { rule = ["nn", "NN5", "FIN"] }
    ]
  }
]

// NOTE: Serialized cache files are no longer loaded from the extractor config.
//       Rather they are optional arguments to the constructor of the extractor.
//parse-cache = "cache/parses/parse_cache0.ser"
//tokenization-cache = "cache/tokenization/token_cache0.ser"

// Enclosing punctutation to consider expanding to close after extraction.
enclosing-punctuation = [
  { open = "(", close = ")" }
]
